package cff.cashflowforecast.entity;import java.time.LocalDate;import java.util.UUID;import javax.persistence.*;import com.fasterxml.jackson.databind.annotation.JsonDeserialize;import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;import com.sun.istack.NotNull;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;/** * By using Entity annotation a class can be mapped to a table Generate setters * and getters methods using annotations Generate tostring method using * annotation */@Data@Entity@AllArgsConstructor@NoArgsConstructorpublic class Forecast {	@Id	@GeneratedValue	@Column(length = 12, name = "forecast_id")	private UUID forecastId;	@NotNull	@Column(length = 12, name = "forecast_name")	private String forecastName;	@Column(length = 30)	private String description;	@NotNull	private String status;	@NotNull	@Column(name = "start_date")	@JsonDeserialize(using = LocalDateDeserializer.class)	private LocalDate startDate;	@NotNull	@Column(name = "created_date")	@JsonDeserialize(using = LocalDateDeserializer.class)	private LocalDate createdDate;	@NotNull	@Column(name = "end_date")	@JsonDeserialize(using = LocalDateDeserializer.class)	private LocalDate endDate;	@NotNull	@Column(name = "updated_date")	@JsonDeserialize(using = LocalDateDeserializer.class)	private LocalDate updatedDate;	@Column(name = "created_by")	private String createdBy;	@Column(name = "updated_by")	private String updatedBy;	@NotNull	@Column(name = "horizon_period")	private String horizonPeriod;	/*	 * one user can have multiple Forecasts	 */	@NotNull	@ManyToOne	@JoinColumn(name = "user_id")	private CFUser user;	/*	 * we can create multiple Forecasts using one account	 */	@NotNull	@ManyToOne	@JoinColumn(name = "account_id")	private AccountDetail accountDetail;}